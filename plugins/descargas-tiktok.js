import fetch from 'node-fetch';

// --- Constantes y Configuraci√≥n de Transmisi√≥n (Estilo Ellen Joe) ---
const newsletterJid = '120363418071540900@newsletter';
const newsletterName = '‚è§ÕüÕû‡•Ç‚É™·çùÕú‚Åû‚ü° ùêÑllen ùêâ·¥è·¥á\'s ùêíervice';

var handler = async (m, { conn, args, usedPrefix, command }) => {
    const name = conn.getName(m.sender); // Identificando al Proxy
    const emoji = 'üé∂'; // Emoji para la operaci√≥n de TikTok, puedes elegir otro si prefieres 'üé•'

    const contextInfo = {
        mentionedJid: [m.sender],
        isForwarded: true,
        forwardingScore: 999,
        forwardedNewsletterMessageInfo: {
            newsletterJid,
            newsletterName,
            serverMessageId: -1
        },
        externalAdReply: {
            title: 'Ellen Joe: Pista localizada. ü¶à',
            body: `Procesando solicitud para el/la Proxy ${name}...`,
            thumbnail: icons, // Aseg√∫rate de que 'icons' y 'redes' est√©n definidos globalmente
            sourceUrl: redes,
            mediaType: 1,
            renderLargerThumbnail: false
        }
    };

    if (!args[0]) {
        return conn.reply(
            m.chat,
            `${emoji} *Rastro fr√≠o, Proxy ${name}.* Necesito un identificador de TikTok para proceder.\n\n_Ejemplo: ${usedPrefix + command} [tu_enlace_TikTok_aqu√≠]`,
            m,
            { contextInfo, quoted: m }
        );
    }

    try {
        await conn.reply(
            m.chat,
            `üîÑ *Iniciando protocolo de extracci√≥n de TikTok, Proxy ${name}.* Aguarda, la transmisi√≥n est√° en curso.`,
            m,
            { contextInfo, quoted: m }
        );

        const tiktokData = await tiktokdl(args[0]);

        if (!tiktokData || !tiktokData.data || !tiktokData.data.play) {
            return conn.reply(
                m.chat,
                `‚ùå *Fallo en la extracci√≥n de TikTok, Proxy ${name}.*\nLa se√±al es d√©bil o el objetivo ha sido eliminado.`,
                m,
                { contextInfo, quoted: m }
            );
        }

        const videoURL = tiktokData.data.play;
        const metadata = tiktokData.data;

        // Construir el caption con la informaci√≥n disponible
        const caption = `
‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ[ ùöÉùöíùöîùöÉùöòùöî ùô≥ùöéùöåùöòùöçùöéùöç: ùô≤ùöäùöõùöêùöä ùöÖùöíùöçùöéùöò ùô∞ùöúùöéùöêùöûùöõùöäùöçùöä ]‚îÅ‚îÅ‚îÅ‚îÅ‚¨£
üìπ *Designaci√≥n:* ${metadata.title || 'Sin t√≠tulo'}
üßë‚Äçüíª *Fuente Operacional:* ${metadata.author?.nickname || 'Desconocido'}
‚è±Ô∏è *Duraci√≥n del Flujo:* ${metadata.duration ? `${Math.floor(metadata.duration / 60)}m ${metadata.duration % 60}s` : 'N/A'}
‚ù§Ô∏è *Impacto Registrado:* ${metadata.digg_count ? metadata.digg_count.toLocaleString() : 'N/A'} (Me gusta)
üí¨ *Comunicaci√≥n Anexa:* ${metadata.comment_count ? metadata.comment_count.toLocaleString() : 'N/A'} (Comentarios)
üîó *URL Original:* ${args[0]}
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚¨£`;

        if (videoURL) {
            await conn.sendFile(
                m.chat,
                videoURL,
                "tiktok.mp4",
                caption,
                m,
                null,
                { contextInfo, quoted: m }
            );
            m.react('‚úÖ'); // Reacci√≥n de √©xito
        } else {
            return conn.reply(
                m.chat,
                `‚ùå *Error de Transmisi√≥n, Proxy ${name}.*\nNo se pudo obtener una URL de descarga v√°lida.`,
                m,
                { contextInfo, quoted: m }
            );
        }
    } catch (error) { // Cambiado 'error1' a 'error' para mejor pr√°ctica
        console.error("Error al procesar TikTok:", error);
        return conn.reply(
            m.chat,
            `‚ö†Ô∏è *Anomal√≠a cr√≠tica en la operaci√≥n de TikTok, Proxy ${name}.*\nNo pude completar la extracci√≥n. Verifica el enlace o informa del error.\nDetalles: ${error.message}`,
            m,
            { contextInfo, quoted: m }
        );
    }
};

handler.help = ['tiktok'].map((v) => v + ' *<link>*');
handler.tags = ['descargas'];
handler.command = ['tiktok', 'tt'];
handler.group = true;
handler.register = true;
handler.coin = 2; // Mantener costo de coin
handler.limit = true; // Mantener uso de l√≠mite

export default handler;

// Funci√≥n para obtener datos de TikTok (sin cambios)
async function tiktokdl(url) {
    let tikwm = `https://www.tikwm.com/api/?url=${url}&hd=1`; // Agregado &hd=1 para intentar HD
    let response = await (await fetch(tikwm)).json();
    return response;
}
